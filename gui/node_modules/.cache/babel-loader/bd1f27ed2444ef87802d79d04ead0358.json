{"ast":null,"code":"import _classCallCheck from\"G:\\\\Github\\\\creativehire\\\\frontend\\\\gui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"G:\\\\Github\\\\creativehire\\\\frontend\\\\gui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"G:\\\\Github\\\\creativehire\\\\frontend\\\\gui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"G:\\\\Github\\\\creativehire\\\\frontend\\\\gui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _inherits from\"G:\\\\Github\\\\creativehire\\\\frontend\\\\gui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React from'react';import{Form,Input,Checkbox,Button}from'antd';import*as actions from'../store/actions/auth';import{connect}from'react-redux';import{NavLink}from'react-router-dom';var formItemLayout={labelCol:{xs:{span:24},sm:{span:8}},wrapperCol:{xs:{span:24},sm:{span:16}}};var tailFormItemLayout={wrapperCol:{xs:{span:24,offset:0},sm:{span:16,offset:8}}};var RegistrationForm=/*#__PURE__*/function(_React$Component){_inherits(RegistrationForm,_React$Component);function RegistrationForm(){var _getPrototypeOf2;var _this;_classCallCheck(this,RegistrationForm);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(RegistrationForm)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.formRef=React.createRef();return _this;}_createClass(RegistrationForm,[{key:\"render\",value:function render(){var _this2=this;var onFinish=function onFinish(values){_this2.props.onAuth(values.username,values.email,values.password,values.confirm);_this2.props.history.push('/');console.log('Received values of form: ',values);};return React.createElement(Form,Object.assign({},formItemLayout,{name:\"register\",onFinish:onFinish,scrollToFirstError:true}),React.createElement(Form.Item,{label:\"Username\",name:\"username\",rules:[{required:true,message:'Please input your username!'}]},React.createElement(Input,null)),React.createElement(Form.Item,{name:\"email\",label:\"E-mail\",rules:[{type:'email',message:'The input is not valid E-mail!'},{required:true,message:'Please input your E-mail!'}]},React.createElement(Input,null)),React.createElement(Form.Item,{name:\"password\",label:\"Password\",rules:[{required:true,message:'Please input your password!'}],hasFeedback:true},React.createElement(Input.Password,null)),React.createElement(Form.Item,{name:\"confirm\",label:\"Confirm Password\",dependencies:['password'],hasFeedback:true,rules:[{required:true,message:'Please confirm your password!'},function(_ref){var getFieldValue=_ref.getFieldValue;return{validator:function validator(rule,value){if(!value||getFieldValue('password')===value){return Promise.resolve();}return Promise.reject('The two passwords that you entered do not match!');}};}]},React.createElement(Input.Password,null)),React.createElement(Form.Item,Object.assign({name:\"agreement\",valuePropName:\"checked\"},tailFormItemLayout),React.createElement(Checkbox,null,\"I have read the \",React.createElement(\"a\",{href:\"\"},\"agreement\"))),React.createElement(Form.Item,tailFormItemLayout,React.createElement(Button,{type:\"primary\",htmlType:\"submit\"},\"Signup\"),\" Or\",React.createElement(NavLink,{style:{marginRight:'10px'},to:\"/login/\"},\" Login\")));}}]);return RegistrationForm;}(React.Component);;var mapStateToProps=function mapStateToProps(state){return{loading:state.loading,error:state.error};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{onAuth:function onAuth(username,email,password1,password2){return dispatch(actions.authSignup(username,email,password1,password2));}};};export default connect(mapStateToProps,mapDispatchToProps)(RegistrationForm);","map":{"version":3,"sources":["G:/Github/creativehire/frontend/gui/src/containers/Signup.js"],"names":["React","Form","Input","Checkbox","Button","actions","connect","NavLink","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","RegistrationForm","formRef","createRef","onFinish","values","props","onAuth","username","email","password","confirm","history","push","console","log","required","message","type","getFieldValue","validator","rule","value","Promise","resolve","reject","marginRight","Component","mapStateToProps","state","loading","error","mapDispatchToProps","dispatch","password1","password2","authSignup"],"mappings":"6zBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OACEC,IADF,CAEEC,KAFF,CAGEC,QAHF,CAIEC,MAJF,KAKO,MALP,CAOA,MAAO,GAAKC,CAAAA,OAAZ,KAAyB,uBAAzB,CACA,OAAQC,OAAR,KAAsB,aAAtB,CACA,OAASC,OAAT,KAAwB,kBAAxB,CAIA,GAAMC,CAAAA,cAAc,CAAG,CACrBC,QAAQ,CAAE,CACRC,EAAE,CAAE,CACFC,IAAI,CAAE,EADJ,CADI,CAIRC,EAAE,CAAE,CACFD,IAAI,CAAE,CADJ,CAJI,CADW,CASrBE,UAAU,CAAE,CACVH,EAAE,CAAE,CACFC,IAAI,CAAE,EADJ,CADM,CAIVC,EAAE,CAAE,CACFD,IAAI,CAAE,EADJ,CAJM,CATS,CAAvB,CAmBA,GAAMG,CAAAA,kBAAkB,CAAG,CACvBD,UAAU,CAAE,CACVH,EAAE,CAAE,CACFC,IAAI,CAAE,EADJ,CAEFI,MAAM,CAAE,CAFN,CADM,CAKVH,EAAE,CAAE,CACFD,IAAI,CAAE,EADJ,CAEFI,MAAM,CAAE,CAFN,CALM,CADW,CAA3B,C,GAcMC,CAAAA,gB,mbAEFC,O,CAAUjB,KAAK,CAACkB,SAAN,E,mFAIE,iBAEJ,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,MAAM,CAAI,CACzB,MAAI,CAACC,KAAL,CAAWC,MAAX,CACIF,MAAM,CAACG,QADX,CAEIH,MAAM,CAACI,KAFX,CAGIJ,MAAM,CAACK,QAHX,CAIIL,MAAM,CAACM,OAJX,EAMA,MAAI,CAACL,KAAL,CAAWM,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB,EACAC,OAAO,CAACC,GAAR,CAAY,2BAAZ,CAAyCV,MAAzC,EACD,CATD,CAWA,MACI,qBAAC,IAAD,kBACMZ,cADN,EAEE,IAAI,CAAC,UAFP,CAGE,QAAQ,CAAEW,QAHZ,CAIE,kBAAkB,KAJpB,GAMI,oBAAC,IAAD,CAAM,IAAN,EACU,KAAK,CAAC,UADhB,CAEU,IAAI,CAAC,UAFf,CAGU,KAAK,CAAE,CACP,CACIY,QAAQ,CAAE,IADd,CAEIC,OAAO,CAAE,6BAFb,CADO,CAHjB,EAUU,oBAAC,KAAD,MAVV,CANJ,CAkBE,oBAAC,IAAD,CAAM,IAAN,EACE,IAAI,CAAC,OADP,CAEE,KAAK,CAAC,QAFR,CAGE,KAAK,CAAE,CACL,CACEC,IAAI,CAAE,OADR,CAEED,OAAO,CAAE,gCAFX,CADK,CAKL,CACED,QAAQ,CAAE,IADZ,CAEEC,OAAO,CAAE,2BAFX,CALK,CAHT,EAcE,oBAAC,KAAD,MAdF,CAlBF,CAmCE,oBAAC,IAAD,CAAM,IAAN,EACE,IAAI,CAAC,UADP,CAEE,KAAK,CAAC,UAFR,CAGE,KAAK,CAAE,CACL,CACED,QAAQ,CAAE,IADZ,CAEEC,OAAO,CAAE,6BAFX,CADK,CAHT,CASE,WAAW,KATb,EAWE,oBAAC,KAAD,CAAO,QAAP,MAXF,CAnCF,CAiDE,oBAAC,IAAD,CAAM,IAAN,EACE,IAAI,CAAC,SADP,CAEE,KAAK,CAAC,kBAFR,CAGE,YAAY,CAAE,CAAC,UAAD,CAHhB,CAIE,WAAW,KAJb,CAKE,KAAK,CAAE,CACL,CACED,QAAQ,CAAE,IADZ,CAEEC,OAAO,CAAE,+BAFX,CADK,CAKL,kBAAGE,CAAAA,aAAH,MAAGA,aAAH,OAAwB,CACtBC,SADsB,oBACZC,IADY,CACNC,KADM,CACC,CACrB,GAAI,CAACA,KAAD,EAAUH,aAAa,CAAC,UAAD,CAAb,GAA8BG,KAA5C,CAAmD,CACjD,MAAOC,CAAAA,OAAO,CAACC,OAAR,EAAP,CACD,CAED,MAAOD,CAAAA,OAAO,CAACE,MAAR,CAAe,kDAAf,CAAP,CACD,CAPqB,CAAxB,EALK,CALT,EAqBE,oBAAC,KAAD,CAAO,QAAP,MArBF,CAjDF,CAyEE,oBAAC,IAAD,CAAM,IAAN,gBAAW,IAAI,CAAC,WAAhB,CAA4B,aAAa,CAAC,SAA1C,EAAwD1B,kBAAxD,EACE,oBAAC,QAAD,yBACkB,yBAAG,IAAI,CAAC,EAAR,cADlB,CADF,CAzEF,CA+EE,oBAAC,IAAD,CAAM,IAAN,CAAeA,kBAAf,CACY,oBAAC,MAAD,EAAQ,IAAI,CAAC,SAAb,CAAuB,QAAQ,CAAC,QAAhC,WADZ,OAIY,oBAAC,OAAD,EAAS,KAAK,CAAE,CAAC2B,WAAW,CAAE,MAAd,CAAhB,CACA,EAAE,CAAC,SADH,WAJZ,CA/EF,CADJ,CA0FH,C,8BA7GsBzC,KAAK,CAAC0C,S,EA+GpC,CAED,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,CAAW,CAC/B,MAAO,CACHC,OAAO,CAAED,KAAK,CAACC,OADZ,CAEHC,KAAK,CAAEF,KAAK,CAACE,KAFV,CAAP,CAIH,CALD,CAOA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAAC,QAAQ,CAAI,CACnC,MAAO,CACH1B,MAAM,CAAE,gBAACC,QAAD,CAAWC,KAAX,CAAkByB,SAAlB,CAA6BC,SAA7B,QAA2CF,CAAAA,QAAQ,CAAC3C,OAAO,CAAC8C,UAAR,CAAmB5B,QAAnB,CAA6BC,KAA7B,CAAoCyB,SAApC,CAA+CC,SAA/C,CAAD,CAAnD,EADL,CAAP,CAGH,CAJD,CAMA,cAAe5C,CAAAA,OAAO,CAACqC,eAAD,CAAkBI,kBAAlB,CAAP,CAA6C/B,gBAA7C,CAAf","sourcesContent":["import React from 'react';\r\nimport {\r\n  Form,\r\n  Input,\r\n  Checkbox,\r\n  Button,\r\n} from 'antd';\r\n\r\nimport * as actions from '../store/actions/auth';\r\nimport {connect} from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 8,\r\n    },\r\n  },\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 16,\r\n    },\r\n  },\r\n};\r\n\r\nconst tailFormItemLayout = {\r\n    wrapperCol: {\r\n      xs: {\r\n        span: 24,\r\n        offset: 0,\r\n      },\r\n      sm: {\r\n        span: 16,\r\n        offset: 8,\r\n      },\r\n    },\r\n  };\r\n\r\n\r\nclass RegistrationForm extends React.Component {\r\n\r\n    formRef = React.createRef();\r\n\r\n\r\n\r\n        render(){\r\n\r\n            const onFinish = values => {\r\n              this.props.onAuth(\r\n                  values.username,\r\n                  values.email,\r\n                  values.password,\r\n                  values.confirm\r\n              );\r\n              this.props.history.push('/');\r\n              console.log('Received values of form: ', values);\r\n            };\r\n\r\n            return (\r\n                <Form\r\n                  {...formItemLayout}\r\n                  name=\"register\"\r\n                  onFinish={onFinish}\r\n                  scrollToFirstError\r\n                >\r\n                    <Form.Item\r\n                              label=\"Username\"\r\n                              name=\"username\"\r\n                              rules={[\r\n                              {\r\n                                  required: true,\r\n                                  message: 'Please input your username!',\r\n                              },\r\n                              ]}\r\n                          >\r\n                              <Input />\r\n                    </Form.Item>    \r\n                  <Form.Item\r\n                    name=\"email\"\r\n                    label=\"E-mail\"\r\n                    rules={[\r\n                      {\r\n                        type: 'email',\r\n                        message: 'The input is not valid E-mail!',\r\n                      },\r\n                      {\r\n                        required: true,\r\n                        message: 'Please input your E-mail!',\r\n                      },\r\n                    ]}\r\n                  >\r\n                    <Input />\r\n                  </Form.Item>\r\n            \r\n                  <Form.Item\r\n                    name=\"password\"\r\n                    label=\"Password\"\r\n                    rules={[\r\n                      {\r\n                        required: true,\r\n                        message: 'Please input your password!',\r\n                      },\r\n                    ]}\r\n                    hasFeedback\r\n                  >\r\n                    <Input.Password />\r\n                  </Form.Item>\r\n            \r\n                  <Form.Item\r\n                    name=\"confirm\"\r\n                    label=\"Confirm Password\"\r\n                    dependencies={['password']}\r\n                    hasFeedback\r\n                    rules={[\r\n                      {\r\n                        required: true,\r\n                        message: 'Please confirm your password!',\r\n                      },\r\n                      ({ getFieldValue }) => ({\r\n                        validator(rule, value) {\r\n                          if (!value || getFieldValue('password') === value) {\r\n                            return Promise.resolve();\r\n                          }\r\n            \r\n                          return Promise.reject('The two passwords that you entered do not match!');\r\n                        },\r\n                      }),\r\n                    ]}\r\n                  >\r\n                    <Input.Password />\r\n                  </Form.Item>\r\n            \r\n                  <Form.Item name=\"agreement\" valuePropName=\"checked\" {...tailFormItemLayout}>\r\n                    <Checkbox>\r\n                      I have read the <a href=\"\">agreement</a>\r\n                    </Checkbox>\r\n                  </Form.Item>\r\n            \r\n                  <Form.Item {...tailFormItemLayout}>\r\n                              <Button type=\"primary\" htmlType=\"submit\">\r\n                                Signup\r\n                              </Button> Or\r\n                              <NavLink style={{marginRight: '10px'}} \r\n                              to='/login/'> Login\r\n                              </NavLink>\r\n                          </Form.Item>\r\n                </Form>\r\n              );\r\n        }\r\n \r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        loading: state.loading,\r\n        error: state.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (username, email, password1, password2) => dispatch(actions.authSignup(username, email, password1, password2))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RegistrationForm);"]},"metadata":{},"sourceType":"module"}