{"ast":null,"code":"import \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/checkbox/style\";\nimport _Checkbox from \"antd/es/checkbox\";\nimport \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport \"antd/es/spin/style\";\nimport _Spin from \"antd/es/spin\";\nimport \"antd/es/alert/style\";\nimport _Alert from \"antd/es/alert\";\nvar _jsxFileName = \"G:\\\\Github\\\\creativehire\\\\frontend\\\\gui\\\\src\\\\containers\\\\Login.js\";\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as actions from '../store/actions/auth';\nimport { LoadingOutlined } from '@ant-design/icons';\nconst antIcon = React.createElement(LoadingOutlined, {\n  style: {\n    fontSize: 24\n  },\n  spin: true,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9\n  },\n  __self: this\n});\nconst layout = {\n  labelCol: {\n    span: 8\n  },\n  wrapperCol: {\n    span: 8\n  }\n};\nconst tailLayout = {\n  wrapperCol: {\n    offset: 8,\n    span: 16\n  }\n};\n\nclass NormalLoginForm extends React.Component {\n  componentDidMount() {\n    if (localStorage.getItem('token')) {\n      this.props.history.push('/');\n    }\n  }\n\n  render() {\n    const onFinish = values => {\n      this.props.onAuth(values.username, values.password);\n    };\n\n    const onFinishFailed = errorInfo => {};\n\n    const onSubCap = event => {\n      event.preventDefault(); // this.props.onAuth(event.username, event.password);\n    };\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = // <p>{this.props.error.message}</p>\n      React.createElement(_Alert, Object.assign({}, tailLayout, {\n        message: \"Username password combination not found.\",\n        type: \"error\",\n        showIcon: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, this.props.loading ? React.createElement(_Spin, {\n      indicator: antIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }) : React.createElement(_Form, Object.assign({}, layout, {\n      initialValues: {\n        remember: true\n      },\n      ref: this.formRef,\n      onSubmitCapture: onSubCap,\n      onFinish: onFinish,\n      onFinishFailed: onFinishFailed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(_Form.Item, {\n      label: \"Username\",\n      name: \"username\",\n      rules: [{\n        required: true,\n        message: 'Please input your username!'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(_Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    })), React.createElement(_Form.Item, {\n      label: \"Password\",\n      name: \"password\",\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(_Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })), React.createElement(_Form.Item, Object.assign({}, tailLayout, {\n      name: \"remember\",\n      valuePropName: \"checked\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(_Checkbox, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Remember me\")), React.createElement(_Form.Item, Object.assign({}, tailLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(_Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Login\"), \" Or\", React.createElement(NavLink, {\n      style: {\n        marginRight: '10px'\n      },\n      to: \"/signup/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \" Signup\")), errorMessage));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.loading,\n    error: state.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (username, password) => dispatch(actions.authLogin(username, password))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NormalLoginForm);","map":{"version":3,"sources":["G:/Github/creativehire/frontend/gui/src/containers/Login.js"],"names":["React","NavLink","connect","actions","LoadingOutlined","antIcon","fontSize","layout","labelCol","span","wrapperCol","tailLayout","offset","NormalLoginForm","Component","componentDidMount","localStorage","getItem","props","history","push","render","onFinish","values","onAuth","username","password","onFinishFailed","errorInfo","onSubCap","event","preventDefault","errorMessage","error","loading","remember","formRef","required","message","marginRight","mapStateToProps","state","mapDispatchToProps","dispatch","authLogin"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Form, Input, Button, Checkbox, Spin, Alert } from 'antd';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../store/actions/auth';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\n\r\n\r\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\r\n\r\nconst layout = {\r\n  labelCol: {\r\n    span: 8,\r\n  },\r\n  wrapperCol: {\r\n    span: 8,\r\n  },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: {\r\n    offset: 8,\r\n    span: 16,\r\n  },\r\n};\r\nclass NormalLoginForm extends React.Component {\r\n\r\n    componentDidMount(){\r\n\r\n        if(localStorage.getItem('token')){\r\n            this.props.history.push('/');\r\n        }\r\n    }\r\n\r\n  render() {\r\n\r\n    const onFinish = values => {\r\n        this.props.onAuth(values.username, values.password);\r\n    };\r\n    \r\n    const onFinishFailed = errorInfo => {\r\n    };\r\n\r\n    const onSubCap = event => {\r\n        event.preventDefault();\r\n        // this.props.onAuth(event.username, event.password);\r\n    };\r\n\r\n    let errorMessage = null;\r\n\r\n    if(this.props.error){\r\n        errorMessage = (\r\n            // <p>{this.props.error.message}</p>\r\n            <Alert {...tailLayout} message = 'Username password combination not found.' type='error' showIcon />\r\n        )\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <div>\r\n            {\r\n  \r\n                this.props.loading ?\r\n  \r\n                <Spin indicator={antIcon} />\r\n                \r\n                :\r\n  \r\n  \r\n              <Form\r\n              {...layout}\r\n              initialValues={{\r\n                  remember: true,\r\n              }}\r\n              ref={this.formRef}\r\n              onSubmitCapture={onSubCap}\r\n              onFinish={onFinish}\r\n              onFinishFailed={onFinishFailed}\r\n              >\r\n              <Form.Item\r\n                  label=\"Username\"\r\n                  name=\"username\"\r\n                  rules={[\r\n                  {\r\n                      required: true,\r\n                      message: 'Please input your username!',\r\n                  },\r\n                  ]}\r\n              >\r\n                  <Input />\r\n              </Form.Item>\r\n  \r\n              <Form.Item\r\n                  label=\"Password\"\r\n                  name=\"password\"\r\n                  rules={[\r\n                  {\r\n                      required: true,\r\n                      message: 'Please input your password!',\r\n                  },\r\n                  ]}\r\n              >\r\n                  <Input.Password />\r\n              </Form.Item>\r\n  \r\n              <Form.Item {...tailLayout} name=\"remember\" valuePropName=\"checked\">\r\n                  <Checkbox>Remember me</Checkbox>\r\n              </Form.Item>\r\n  \r\n              <Form.Item {...tailLayout}>\r\n                  <Button type=\"primary\" htmlType=\"submit\">\r\n                  Login\r\n                  </Button> Or\r\n                  <NavLink style={{marginRight: '10px'}} \r\n                  to='/signup/'> Signup\r\n                  </NavLink>\r\n              </Form.Item>\r\n\r\n              \r\n                {errorMessage}\r\n              </Form>\r\n          }\r\n      </div>\r\n    );\r\n  } \r\n  \r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        loading: state.loading,\r\n        error: state.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (username, password) => dispatch(actions.authLogin(username, password))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NormalLoginForm);"]},"metadata":{},"sourceType":"module"}