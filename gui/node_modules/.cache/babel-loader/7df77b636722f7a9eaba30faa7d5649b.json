{"ast":null,"code":"var _jsxFileName = \"G:\\\\Github\\\\creativehire\\\\frontend\\\\gui\\\\src\\\\components\\\\Form.js\";\nimport React from 'react';\nimport { Form, Input, Button, DatePicker, Upload } from 'antd';\nimport { UploadOutlined, InboxOutlined } from '@ant-design/icons';\nimport axios from 'axios';\nconst layout = {\n  labelCol: {\n    span: 6\n  },\n  wrapperCol: {\n    span: 14\n  }\n};\nconst validateMessages = {\n  required: 'This field is required!',\n  types: {\n    number: 'Not a valid number!'\n  }\n};\n\nconst normFile = e => {\n  console.log('Upload event:', e);\n\n  if (Array.isArray(e)) {\n    return e;\n  }\n\n  return e && e.fileList;\n};\n\nclass CustomForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {// console.log(this.props);\n    };\n\n    this.handleFormSubmit = (event, requestType, jobpostID) => {\n      event.preventDefault();\n      const title = event.target.elements.title.value;\n      const description = event.target.elements.description.value;\n      const img = event.target.elements.img.value;\n      const expiry_date = event.target.elements.expiry_date.value;\n      const job_poster_id = localStorage.getItem('userProfileID');\n\n      switch (requestType) {\n        case 'post':\n          return axios.post('http://127.0.0.1:8000/jobpost/', {\n            title: title,\n            description: description,\n            job_poster_id: job_poster_id,\n            img: img\n          }).then(res => {\n            console.log(res);\n\n            if (res.status == '201') {\n              this.props.history.push('/jobpost/' + res.data.id + '/');\n            }\n          }).catch(error => this.setState({\n            err: error\n          }));\n\n        case 'put':\n          return axios.put('http://127.0.0.1:8000/jobpost/' + jobpostID + '/', {\n            title: title,\n            description: description,\n            job_poster_id: job_poster_id,\n            img: img\n          }).then(res => console.log(res)).catch(error => console.error(error)).finally(f => window.location.reload());\n      }\n    };\n\n    this.state = {\n      err: null\n    };\n  }\n\n  render() {\n    return React.createElement(Form, Object.assign({\n      onSubmitCapture: event => this.handleFormSubmit(event, this.props.requestType, this.props.jobpostID)\n    }, layout, {\n      name: \"nest-messages\",\n      validateMessages: validateMessages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(Form.Item, {\n      label: \"Title\",\n      rules: [{\n        required: true\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Input, {\n      name: \"title\",\n      placeholder: this.props.requestType == 'put' ? this.props.jobpost.title : \"Enter a title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    })), React.createElement(Form.Item, {\n      label: \"Description\",\n      rules: [{\n        required: true,\n        message: 'Please enter an image url'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(Input.TextArea, {\n      name: \"description\",\n      placeholder: this.props.requestType == 'put' ? this.props.jobpost.description : \"Enter a Description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    })), React.createElement(Form.Item, {\n      label: \"Image\",\n      rules: [{\n        required: true,\n        message: 'Please input image url!'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      name: \"img\",\n      valuePropName: \"fileList\",\n      getValueFromEvent: normFile,\n      noStyle: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(Upload.Dragger, {\n      name: \"files\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"ant-upload-drag-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(InboxOutlined, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      className: \"ant-upload-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Click or drag file to this area to upload\"), React.createElement(\"p\", {\n      className: \"ant-upload-hint\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Support for a single or bulk upload.\")))), React.createElement(Form.Item, {\n      label: \"Expires On\",\n      rules: [{\n        required: true\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(DatePicker, {\n      name: \"expiry_date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    })), React.createElement(Form.Item, {\n      hidden: this.state.err == null ? true : false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), React.createElement(Form.Item, {\n      wrapperCol: { ...layout.wrapperCol,\n        offset: 8\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, this.props.btnText)));\n  }\n\n}\n\nexport default CustomForm;","map":{"version":3,"sources":["G:/Github/creativehire/frontend/gui/src/components/Form.js"],"names":["React","Form","Input","Button","DatePicker","Upload","UploadOutlined","InboxOutlined","axios","layout","labelCol","span","wrapperCol","validateMessages","required","types","number","normFile","e","console","log","Array","isArray","fileList","CustomForm","Component","constructor","props","componentDidMount","handleFormSubmit","event","requestType","jobpostID","preventDefault","title","target","elements","value","description","img","expiry_date","job_poster_id","localStorage","getItem","post","then","res","status","history","push","data","id","catch","error","setState","err","put","finally","f","window","location","reload","state","render","jobpost","message","offset","btnText"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Form, Input, Button, DatePicker, Upload } from 'antd';\r\nimport { UploadOutlined, InboxOutlined } from '@ant-design/icons';\r\n\r\n\r\nimport axios from 'axios';\r\n\r\nconst layout = {\r\n  labelCol: {\r\n    span: 6,\r\n  },\r\n  wrapperCol: {\r\n    span: 14,\r\n  },\r\n};\r\nconst validateMessages = {\r\n  required: 'This field is required!',\r\n  types: {\r\n    number: 'Not a valid number!',\r\n  },\r\n};\r\n\r\nconst normFile = e => {\r\n  console.log('Upload event:', e);\r\n\r\n  if (Array.isArray(e)) {\r\n    return e;\r\n  }\r\n\r\n  return e && e.fileList;\r\n};\r\n\r\n\r\nclass CustomForm extends React.Component {\r\n\r\n    constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        err: null\r\n      }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n      // console.log(this.props);\r\n    }\r\n\r\n    handleFormSubmit = (event, requestType, jobpostID) => {\r\n        event.preventDefault();\r\n        const title = event.target.elements.title.value;\r\n        const description = event.target.elements.description.value;\r\n        const img = event.target.elements.img.value;\r\n        const expiry_date = event.target.elements.expiry_date.value;\r\n        const job_poster_id = localStorage.getItem('userProfileID');\r\n        \r\n        switch(requestType){\r\n          \r\n            case 'post':\r\n               return axios.post('http://127.0.0.1:8000/jobpost/', {\r\n                    title: title,\r\n                    description: description,\r\n                    job_poster_id: job_poster_id,\r\n                    img:img\r\n                })\r\n                .then(res => {\r\n                  console.log(res);\r\n                  if(res.status == '201'){\r\n                    this.props.history.push('/jobpost/' + res.data.id + '/');\r\n                  }\r\n                })\r\n                .catch(error => this.setState({err: error}));\r\n\r\n            case 'put':\r\n                return axios.put('http://127.0.0.1:8000/jobpost/' + jobpostID + '/', {\r\n                    title: title,\r\n                    description: description,\r\n                    job_poster_id: job_poster_id,\r\n                    img:img\r\n                })\r\n                .then(res => console.log(res))\r\n                .catch(error => console.error(error))\r\n                .finally(f => window.location.reload());\r\n                \r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <Form onSubmitCapture={(event) => this.handleFormSubmit(\r\n                event,\r\n                this.props.requestType,\r\n                this.props.jobpostID\r\n                )} {...layout} name=\"nest-messages\" validateMessages={validateMessages}>\r\n              <Form.Item\r\n                label=\"Title\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                  },\r\n                ]}\r\n              >\r\n                <Input name=\"title\" placeholder={\r\n                  this.props.requestType == 'put' ?\r\n                    this.props.jobpost.title\r\n                  :\r\n                    \"Enter a title\"\r\n                  }/>\r\n              </Form.Item>\r\n        \r\n              <Form.Item label=\"Description\"\r\n              rules={[\r\n                  {\r\n                    required: true,\r\n                    message:'Please enter an image url'},\r\n              ]}>\r\n                <Input.TextArea name=\"description\" placeholder={\r\n                  this.props.requestType == 'put' ?\r\n                    this.props.jobpost.description\r\n                  :\r\n                    \"Enter a Description\"\r\n                  }/>\r\n              </Form.Item>\r\n\r\n              <Form.Item \r\n              label=\"Image\"\r\n              \r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: 'Please input image url!',\r\n                },\r\n                ]}\r\n              >\r\n                <Form.Item name=\"img\" valuePropName=\"fileList\" getValueFromEvent={normFile} noStyle>\r\n                  <Upload.Dragger name=\"files\">\r\n                    <p className=\"ant-upload-drag-icon\">\r\n                      <InboxOutlined />\r\n                    </p>\r\n                    <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\r\n                    <p className=\"ant-upload-hint\">Support for a single or bulk upload.</p>\r\n                  </Upload.Dragger>\r\n                </Form.Item>\r\n              </Form.Item>\r\n\r\n              \r\n              {/* <Form.Item\r\n                label=\"Image\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: 'Please input image url!',\r\n                  },\r\n                ]}\r\n              >\r\n                  <Input name=\"img\"  placeholder={\r\n                  this.props.requestType == 'put' ?\r\n                    this.props.jobpost.img\r\n                  :\r\n                    \"Enter image url\"\r\n                  }/>\r\n              </Form.Item> */}\r\n\r\n\r\n\r\n\r\n\r\n        \r\n              <Form.Item label=\"Expires On\" \r\n              rules={[\r\n                  {required:true,}\r\n              ]}>\r\n                <DatePicker name=\"expiry_date\" />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                hidden={this.state.err == null ? true : false}\r\n              >\r\n              </Form.Item>\r\n             \r\n              <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                  {this.props.btnText}\r\n                </Button>\r\n              </Form.Item>\r\n            </Form>\r\n          );\r\n    }\r\n \r\n}\r\n\r\nexport default CustomForm;"]},"metadata":{},"sourceType":"module"}