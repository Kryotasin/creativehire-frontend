{"ast":null,"code":"var _jsxFileName = \"G:\\\\Github\\\\creativehire\\\\frontend\\\\gui\\\\src\\\\containers\\\\Signup.js\";\nimport React from 'react';\nimport { Form, Input, Checkbox, Button } from 'antd';\nimport * as actions from '../store/actions/auth';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport axios from 'axios';\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 8\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 16\n    }\n  }\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0\n    },\n    sm: {\n      span: 16,\n      offset: 8\n    }\n  }\n};\n\nclass RegistrationForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.formRef = React.createRef();\n  }\n\n  componentDidMount() {\n    axios.post('localhost:8000/testing/').then(res => console.log(res));\n  }\n\n  render() {\n    const onFinish = values => {\n      this.props.onAuth(values.username, values.email, values.password, values.confirm);\n      this.props.history.push('/');\n      console.log('Received values of form: ', values);\n    };\n\n    return React.createElement(Form, Object.assign({}, formItemLayout, {\n      name: \"register\",\n      onFinish: onFinish,\n      scrollToFirstError: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(Form.Item, {\n      label: \"Username\",\n      name: \"username\",\n      rules: [{\n        required: true,\n        message: 'Please input your username!'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    })), React.createElement(Form.Item, {\n      name: \"email\",\n      label: \"E-mail\",\n      rules: [{\n        type: 'email',\n        message: 'The input is not valid E-mail!'\n      }, {\n        required: true,\n        message: 'Please input your E-mail!'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    })), React.createElement(Form.Item, {\n      name: \"password\",\n      label: \"Password\",\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }],\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    })), React.createElement(Form.Item, {\n      name: \"confirm\",\n      label: \"Confirm Password\",\n      dependencies: ['password'],\n      hasFeedback: true,\n      rules: [{\n        required: true,\n        message: 'Please confirm your password!'\n      }, ({\n        getFieldValue\n      }) => ({\n        validator(rule, value) {\n          if (!value || getFieldValue('password') === value) {\n            return Promise.resolve();\n          }\n\n          return Promise.reject('The two passwords that you entered do not match!');\n        }\n\n      })],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    })), React.createElement(Form.Item, Object.assign({\n      name: \"agreement\",\n      valuePropName: \"checked\"\n    }, tailFormItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), React.createElement(Checkbox, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"I have read the \", React.createElement(\"a\", {\n      href: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"agreement\"))), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Signup\"), \" Or\", React.createElement(NavLink, {\n      style: {\n        marginRight: '10px'\n      },\n      to: \"/login/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \" Login\")));\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.loading,\n    error: state.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (username, email, password1, password2) => dispatch(actions.authSignup(username, email, password1, password2))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RegistrationForm);","map":{"version":3,"sources":["G:/Github/creativehire/frontend/gui/src/containers/Signup.js"],"names":["React","Form","Input","Checkbox","Button","actions","connect","NavLink","axios","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","RegistrationForm","Component","formRef","createRef","componentDidMount","post","then","res","console","log","render","onFinish","values","props","onAuth","username","email","password","confirm","history","push","required","message","type","getFieldValue","validator","rule","value","Promise","resolve","reject","marginRight","mapStateToProps","state","loading","error","mapDispatchToProps","dispatch","password1","password2","authSignup"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {\r\n  Form,\r\n  Input,\r\n  Checkbox,\r\n  Button,\r\n} from 'antd';\r\n\r\nimport * as actions from '../store/actions/auth';\r\nimport {connect} from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nimport axios from 'axios';\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 8,\r\n    },\r\n  },\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 16,\r\n    },\r\n  },\r\n};\r\n\r\nconst tailFormItemLayout = {\r\n    wrapperCol: {\r\n      xs: {\r\n        span: 24,\r\n        offset: 0,\r\n      },\r\n      sm: {\r\n        span: 16,\r\n        offset: 8,\r\n      },\r\n    },\r\n  };\r\n\r\n\r\nclass RegistrationForm extends React.Component {\r\n\r\n    formRef = React.createRef();\r\n\r\n    componentDidMount() {\r\n      axios.post('localhost:8000/testing/')\r\n      .then (res => console.log(res))\r\n    }\r\n\r\n\r\n\r\n        render(){\r\n\r\n            const onFinish = values => {\r\n              this.props.onAuth(\r\n                  values.username,\r\n                  values.email,\r\n                  values.password,\r\n                  values.confirm\r\n              );\r\n              this.props.history.push('/');\r\n              console.log('Received values of form: ', values);\r\n            };\r\n\r\n            return (\r\n                <Form\r\n                  {...formItemLayout}\r\n                  name=\"register\"\r\n                  onFinish={onFinish}\r\n                  scrollToFirstError\r\n                >\r\n                    <Form.Item\r\n                              label=\"Username\"\r\n                              name=\"username\"\r\n                              rules={[\r\n                              {\r\n                                  required: true,\r\n                                  message: 'Please input your username!',\r\n                              },\r\n                              ]}\r\n                          >\r\n                              <Input />\r\n                    </Form.Item>    \r\n                  <Form.Item\r\n                    name=\"email\"\r\n                    label=\"E-mail\"\r\n                    rules={[\r\n                      {\r\n                        type: 'email',\r\n                        message: 'The input is not valid E-mail!',\r\n                      },\r\n                      {\r\n                        required: true,\r\n                        message: 'Please input your E-mail!',\r\n                      },\r\n                    ]}\r\n                  >\r\n                    <Input />\r\n                  </Form.Item>\r\n            \r\n                  <Form.Item\r\n                    name=\"password\"\r\n                    label=\"Password\"\r\n                    rules={[\r\n                      {\r\n                        required: true,\r\n                        message: 'Please input your password!',\r\n                      },\r\n                    ]}\r\n                    hasFeedback\r\n                  >\r\n                    <Input.Password />\r\n                  </Form.Item>\r\n            \r\n                  <Form.Item\r\n                    name=\"confirm\"\r\n                    label=\"Confirm Password\"\r\n                    dependencies={['password']}\r\n                    hasFeedback\r\n                    rules={[\r\n                      {\r\n                        required: true,\r\n                        message: 'Please confirm your password!',\r\n                      },\r\n                      ({ getFieldValue }) => ({\r\n                        validator(rule, value) {\r\n                          if (!value || getFieldValue('password') === value) {\r\n                            return Promise.resolve();\r\n                          }\r\n            \r\n                          return Promise.reject('The two passwords that you entered do not match!');\r\n                        },\r\n                      }),\r\n                    ]}\r\n                  >\r\n                    <Input.Password />\r\n                  </Form.Item>\r\n            \r\n                  <Form.Item name=\"agreement\" valuePropName=\"checked\" {...tailFormItemLayout}>\r\n                    <Checkbox>\r\n                      I have read the <a href=\"\">agreement</a>\r\n                    </Checkbox>\r\n                  </Form.Item>\r\n            \r\n                  <Form.Item {...tailFormItemLayout}>\r\n                              <Button type=\"primary\" htmlType=\"submit\">\r\n                                Signup\r\n                              </Button> Or\r\n                              <NavLink style={{marginRight: '10px'}} \r\n                              to='/login/'> Login\r\n                              </NavLink>\r\n                          </Form.Item>\r\n                </Form>\r\n              );\r\n        }\r\n \r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        loading: state.loading,\r\n        error: state.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (username, email, password1, password2) => dispatch(actions.authSignup(username, email, password1, password2))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RegistrationForm);"]},"metadata":{},"sourceType":"module"}