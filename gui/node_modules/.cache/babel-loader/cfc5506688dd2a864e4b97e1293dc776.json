{"ast":null,"code":"var _jsxFileName = \"G:\\\\Github\\\\creativehire\\\\frontend\\\\gui\\\\src\\\\components\\\\Form.js\";\nimport React from 'react';\nimport { Form, Input, Button, DatePicker, Upload, message } from 'antd';\nimport { InboxOutlined } from '@ant-design/icons';\nimport axios from 'axios';\nconst layout = {\n  labelCol: {\n    span: 6\n  },\n  wrapperCol: {\n    span: 14\n  }\n};\nconst validateMessages = {\n  required: 'This field is required!',\n  types: {\n    number: 'Not a validate number!'\n  }\n};\nconst {\n  Dragger\n} = Upload;\nconst jobdescriptionImageProps = {\n  name: 'file',\n  multiple: false,\n  action: 'http://127.0.0.1:8000/upload-jobpost-image/',\n\n  onChange(info) {\n    const {\n      status\n    } = info.file;\n\n    if (status !== 'uploading') {\n      console.log(info.file, info.fileList);\n    }\n\n    if (status === 'done') {\n      message.success(`${info.file.name} file uploaded successfully.`);\n    } else if (status === 'error') {\n      message.error(`${info.file.name} file upload failed.`);\n    }\n  }\n\n};\n\nclass CustomForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {// console.log(this.props);\n    };\n\n    this.handleFormSubmit = (event, requestType, jobpostID) => {\n      event.preventDefault();\n      const title = event.target.elements.title.value;\n      const description = event.target.elements.description.value;\n      const img_salt = event.target.elements.jdimage;\n      const expiry_date = event.target.elements.expiry_date.value;\n      const job_poster_id = localStorage.getItem('userProfileID');\n      console.log(event.target.elements);\n\n      switch (requestType) {\n        case 'post': //  return axios.post('http://127.0.0.1:8000/jobpost/', {\n        //       title: title,\n        //       description: description,\n        //       job_poster_id: job_poster_id,\n        //       // img:img\n        //   })\n        //   .then(res => {\n        //     console.log(res);\n        //     if(res.status == '201'){\n        //       this.props.history.push('/jobpost/' + res.data.id + '/');\n        //     }\n        //   })\n        //   .catch(error => this.setState({err: error}));\n\n        case 'put':\n          return axios.put('http://127.0.0.1:8000/jobpost/' + jobpostID + '/', {\n            title: title,\n            description: description,\n            job_poster_id: job_poster_id // img:img\n\n          }).then(res => console.log(res)).catch(error => console.error(error));\n        // .finally(f => window.location.reload());\n      }\n    };\n\n    this.state = {\n      err: null\n    };\n  }\n\n  render() {\n    return React.createElement(Form, Object.assign({\n      onSubmitCapture: event => this.handleFormSubmit(event, this.props.requestType, this.props.jobpostID)\n    }, layout, {\n      name: \"nest-messages\",\n      validateMessages: validateMessages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(Form.Item, {\n      label: \"Title\",\n      rules: [{\n        required: true\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(Input, {\n      name: \"title\",\n      placeholder: this.props.requestType == 'put' ? this.props.jobpost.title : \"Enter a title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    })), React.createElement(Form.Item, {\n      label: \"Description\",\n      rules: [{\n        required: true,\n        message: 'Please enter an image url'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(Input.TextArea, {\n      name: \"description\",\n      placeholder: this.props.requestType == 'put' ? this.props.jobpost.description : \"Enter a Description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    })), React.createElement(Form.Item, {\n      name: \"image\",\n      label: \"Image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      name: \"jdimage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(Upload.Dragger, Object.assign({}, jobdescriptionImageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"ant-upload-drag-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(InboxOutlined, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      className: \"ant-upload-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Click or drag image to this area to upload\"), React.createElement(\"p\", {\n      className: \"ant-upload-hint\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Support for .png files only. 150x150 preferred.\")))), React.createElement(Form.Item, {\n      label: \"Expires On\",\n      rules: [{\n        required: true\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(DatePicker, {\n      name: \"expiry_date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    })), React.createElement(Form.Item, {\n      hidden: this.state.err == null ? true : false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), React.createElement(Form.Item, {\n      wrapperCol: { ...layout.wrapperCol,\n        offset: 8\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, this.props.btnText)));\n  }\n\n}\n\nexport default CustomForm;","map":{"version":3,"sources":["G:/Github/creativehire/frontend/gui/src/components/Form.js"],"names":["React","Form","Input","Button","DatePicker","Upload","message","InboxOutlined","axios","layout","labelCol","span","wrapperCol","validateMessages","required","types","number","Dragger","jobdescriptionImageProps","name","multiple","action","onChange","info","status","file","console","log","fileList","success","error","CustomForm","Component","constructor","props","componentDidMount","handleFormSubmit","event","requestType","jobpostID","preventDefault","title","target","elements","value","description","img_salt","jdimage","expiry_date","job_poster_id","localStorage","getItem","put","then","res","catch","state","err","render","jobpost","offset","btnText"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Form, Input, Button, DatePicker, Upload, message } from 'antd';\r\nimport { InboxOutlined } from '@ant-design/icons';\r\n\r\n\r\nimport axios from 'axios';\r\n\r\nconst layout = {\r\n  labelCol: {\r\n    span: 6,\r\n  },\r\n  wrapperCol: {\r\n    span: 14,\r\n  },\r\n};\r\n\r\nconst validateMessages = {\r\n  required: 'This field is required!',\r\n  types: {\r\n    number: 'Not a validate number!',\r\n  },\r\n};\r\n\r\nconst { Dragger } = Upload;\r\n\r\nconst jobdescriptionImageProps = {\r\n  name: 'file',\r\n  multiple: false,\r\n  action: 'http://127.0.0.1:8000/upload-jobpost-image/',\r\n  onChange(info) {\r\n    const { status } = info.file;\r\n    if (status !== 'uploading') {\r\n      console.log(info.file, info.fileList);\r\n    }\r\n    if (status === 'done') {\r\n      message.success(`${info.file.name} file uploaded successfully.`);\r\n    } else if (status === 'error') {\r\n      message.error(`${info.file.name} file upload failed.`);\r\n    }\r\n  },\r\n};\r\n\r\nclass CustomForm extends React.Component {\r\n\r\n    constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        err: null\r\n      }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n      // console.log(this.props);\r\n    }\r\n\r\n    handleFormSubmit = (event, requestType, jobpostID) => {\r\n        event.preventDefault();\r\n        const title = event.target.elements.title.value;\r\n        const description = event.target.elements.description.value;\r\n        const img_salt = event.target.elements.jdimage;\r\n        const expiry_date = event.target.elements.expiry_date.value;\r\n        const job_poster_id = localStorage.getItem('userProfileID');\r\n        \r\n        console.log(event.target.elements)\r\n\r\n        switch(requestType){\r\n            case 'post':\r\n              //  return axios.post('http://127.0.0.1:8000/jobpost/', {\r\n              //       title: title,\r\n              //       description: description,\r\n              //       job_poster_id: job_poster_id,\r\n              //       // img:img\r\n              //   })\r\n              //   .then(res => {\r\n              //     console.log(res);\r\n              //     if(res.status == '201'){\r\n              //       this.props.history.push('/jobpost/' + res.data.id + '/');\r\n              //     }\r\n              //   })\r\n              //   .catch(error => this.setState({err: error}));\r\n\r\n            case 'put':\r\n                return axios.put('http://127.0.0.1:8000/jobpost/' + jobpostID + '/', {\r\n                    title: title,\r\n                    description: description,\r\n                    job_poster_id: job_poster_id,\r\n                    // img:img\r\n                })\r\n                .then(res => console.log(res))\r\n                .catch(error => console.error(error))\r\n                // .finally(f => window.location.reload());\r\n                \r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <Form onSubmitCapture={(event) => this.handleFormSubmit(\r\n                event,\r\n                this.props.requestType,\r\n                this.props.jobpostID\r\n                )} {...layout} name=\"nest-messages\" validateMessages={validateMessages}>\r\n              <Form.Item\r\n                label=\"Title\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                  },\r\n                ]}\r\n              >\r\n                <Input name=\"title\" placeholder={\r\n                  this.props.requestType == 'put' ?\r\n                    this.props.jobpost.title\r\n                  :\r\n                    \"Enter a title\"\r\n                  }/>\r\n              </Form.Item>\r\n        \r\n              <Form.Item label=\"Description\"\r\n              rules={[\r\n                  {\r\n                    required: true,\r\n                    message:'Please enter an image url'},\r\n              ]}>\r\n                <Input.TextArea name=\"description\" placeholder={\r\n                  this.props.requestType == 'put' ?\r\n                    this.props.jobpost.description\r\n                  :\r\n                    \"Enter a Description\"\r\n                  }/>\r\n              </Form.Item>\r\n\r\n                <Form.Item name='image' label=\"Image\" >\r\n                    <Form.Item name=\"jdimage\">\r\n                      <Upload.Dragger {...jobdescriptionImageProps}>\r\n                        <p className=\"ant-upload-drag-icon\">\r\n                          <InboxOutlined />\r\n                        </p>\r\n                        <p className=\"ant-upload-text\">Click or drag image to this area to upload</p>\r\n                        <p className=\"ant-upload-hint\">Support for .png files only. 150x150 preferred.</p>\r\n                      </Upload.Dragger>\r\n                    </Form.Item>\r\n                  </Form.Item>\r\n              \r\n              <Form.Item label=\"Expires On\" \r\n              rules={[\r\n                  {required:true,}\r\n              ]}>\r\n                <DatePicker name=\"expiry_date\" />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                hidden={this.state.err == null ? true : false}\r\n              >\r\n              </Form.Item>\r\n             \r\n              <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                  {this.props.btnText}\r\n                </Button>\r\n              </Form.Item>\r\n            </Form>\r\n          );\r\n    }\r\n \r\n}\r\n\r\nexport default CustomForm;"]},"metadata":{},"sourceType":"module"}